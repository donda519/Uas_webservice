{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/utils/request\";\nimport Cookies from \"js-cookie\";\nimport axios from 'axios';\nexport default {\n  name: \"Edit\",\n  data() {\n    const checkNumeric = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('This blank cannot be empty'));\n      }\n      if (!/^[0-9]*$/.test(value)) {\n        callback(new Error('Please enter a numerical value'));\n      }\n      if (parseInt(value) < 0) {\n        callback(new Error('Please enter a number larger than 0'));\n      }\n      callback();\n    };\n    const checkISBN = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('Please enter the book\\'s ISBN'));\n      }\n      callback();\n    };\n    return {\n      fileList: [],\n      file: null,\n      form: {},\n      categories: [],\n      authors: [],\n      publishers: [],\n      rules: {\n        // cannot be empty\n        qty: [{\n          required: true,\n          message: \"Please enter quantity book\",\n          trigger: 'blur'\n        }],\n        price: [{\n          required: true,\n          message: \"Please enter price book\",\n          trigger: 'blur'\n        }],\n        title: [{\n          required: true,\n          message: \"Please enter the book's name\",\n          trigger: 'blur'\n        }],\n        category_id: [{\n          required: true,\n          message: \"Please enter the book's category\",\n          trigger: 'blur'\n        }],\n        author_id: [{\n          required: true,\n          message: \"Please enter the book's author\",\n          trigger: 'blur'\n        }],\n        publisher_id: [{\n          required: true,\n          message: \"Please enter the book's publisher\",\n          trigger: 'blur'\n        }],\n        year: [{\n          required: true,\n          message: \"Please select a date\",\n          trigger: 'blur'\n        }],\n        // more restrictions\n        isbn: [{\n          required: true,\n          validator: checkISBN,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    const id = this.$route.query.id;\n    request.get(\"api/book/\" + id).then(res => {\n      this.form = res;\n      this.fileList.push({\n        name: 'cover',\n        url: this.form.cover\n      });\n      console.log(this.fileList);\n      // if(this.form.category) {\n      //   this.form.category = this.form.category.id\n      // }\n    });\n\n    request.get('api/category').then(res => {\n      this.categories = res ? res.data.original.data : [];\n    });\n    request.get('api/author').then(res => {\n      this.authors = res ? res.data.original.data : [];\n    });\n    request.get('api/publisher').then(res => {\n      this.publishers = res ? res.data.original.data : [];\n    });\n  },\n  methods: {\n    handleRemove(file, fileList) {\n      console.log(file, fileList);\n      this.fileList.splice(0, 1, {\n        name: 'cover',\n        url: this.form.cover\n      });\n      // this.fileList.push({name: 'cover', url: this.form.cover})\n    },\n\n    handlePreview(file) {\n      console.log(file);\n    },\n    handleChange(val) {\n      console.log(val);\n      this.fileList.splice(0, 1, val);\n    },\n    save() {\n      this.$refs['ruleForm'].validate(valid => {\n        if (valid) {\n          if (this.fileList[0].url != this.form.cover) this.form.cover = this.fileList[0].raw;\n          console.log(this.form);\n          if (typeof this.form.cover === 'string' || this.form.cover instanceof String) {\n            var index = this.form.cover.indexOf(\"books\");\n\n            // Jika \"books\" ditemukan, hapus bagian sebelumnya\n            if (index !== -1) {\n              this.form.cover = this.form.cover.substring(index);\n            }\n          }\n          const formData = new FormData();\n          formData.append('isbn', this.form.isbn);\n          formData.append('title', this.form.title);\n          formData.append('year', this.form.year);\n          formData.append('publisher_id', this.form.publisher_id);\n          formData.append('author_id', this.form.author_id);\n          formData.append('category_id', this.form.category_id);\n          formData.append('qty', this.form.qty);\n          formData.append('price', this.form.price);\n          formData.append('cover', this.form.cover);\n          request.post('api/book/' + this.$route.query.id, formData).then(res => {\n            if (res.code == '200') {\n              this.$notify.success('Updated');\n              this.$router.push(\"/BookList\");\n            } else {\n              this.$notify.error(res.msg);\n            }\n          });\n        }\n      });\n    }\n  },\n  watch: {\n    fileList: function (val) {\n      console.log(val);\n    }\n  }\n};","map":{"version":3,"mappings":";AAkFA;AACA;AACA;AAEA;EACAA;EAEAC;IACA;MACA;QACAC;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACAA;IACA;IAEA;MACA;QACAA;MACA;MACAA;IACA;IAEA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACA;QACAC;UAAAC;UAAAC;UAAAC;QAAA;QACAC;UAAAH;UAAAC;UAAAC;QAAA;QACAE;UAAAJ;UAAAC;UAAAC;QAAA;QACAG;UAAAL;UAAAC;UAAAC;QAAA;QACAI;UAAAN;UAAAC;UAAAC;QAAA;QACAK;UAAAP;UAAAC;UAAAC;QAAA;QACAM;UAAAR;UAAAC;UAAAC;QAAA;QACA;QACAO;UAAAT;UAAAU;UAAAR;QAAA;MACA;IACA;EACA;EAEAS;IACA;IACAC;MACA;MACA;QAAAvB;QAAAwB;MAAA;MACAC;MACA;MACA;MACA;IACA;;IAEAF;MACA;IACA;IAEAA;MACA;IACA;IAEAA;MACA;IACA;EACA;EAEAG;IACAC;MACAF;MACA;QAAAzB;QAAAwB;MAAA;MACA;IAEA;;IACAI;MACAH;IACA;IACAI;MACAJ;MACA;IACA;IACAK;MACA;QACA;UAEA;UACAL;UAEA;YACA;;YAEA;YACA;cACA;YACA;UAEA;UAEA;UACAM;UACAA;UACAA;UACAA;UACAA;UACAA;UACAA;UACAA;UACAA;UACAR;YACA;cACA;cACA;YACA;cACA;YACA;UACA;QACA;MACA;IACA;EACA;EACAS;IACA7B;MACAsB;IACA;EACA;AACA","names":["name","data","callback","fileList","file","form","categories","authors","publishers","rules","qty","required","message","trigger","price","title","category_id","author_id","publisher_id","year","isbn","validator","created","request","url","console","methods","handleRemove","handlePreview","handleChange","save","formData","watch"],"sourceRoot":"src/views/book","sources":["Edit.vue"],"sourcesContent":["<template>\r\n  <div style=\"padding: 10px;\">\r\n    <div style=\"font-size: 40px; font-family: Arial; margin-bottom: 5px\">Edit Book</div>\r\n    <div style=\"width: 60%\">\r\n      <!-- form area -->\r\n      <el-form id=\"form\" :inline=\"true\" :model=\"form\" :rules=\"rules\" ref=\"ruleForm\">\r\n        <el-form-item label=\"ISBN: \" style=\"margin-left: 2px\" prop=\"isbn\">\r\n          <el-input v-model=\"form.isbn\" placeholder=\"Enter isbn\"></el-input>\r\n        </el-form-item>\r\n        <!-- <el-form-item label=\"Description: \" style=\"margin-left: 2px;\" prop=\"description\">\r\n          <el-input style=\"width: 500px\" type=\"textarea\" v-model=\"form.description\" placeholder=\"Enter description\"></el-input>\r\n        </el-form-item> -->\r\n        <el-form-item label=\"Title: \" style=\"margin-left: 2px\" prop=\"name\">\r\n          <el-input v-model=\"form.title\" placeholder=\"Enter name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Category: \" style=\"margin-left: 2px\">\r\n          <el-cascader\r\n              :props=\"{value: 'id', label: 'name'}\"\r\n              v-model=\"form.category_id\"\r\n              :options=\"categories\"></el-cascader>\r\n        </el-form-item>\r\n        <el-form-item label=\"Author: \" style=\"margin-left: 2px\" prop=\"author\">\r\n          <!-- <el-input v-model=\"form.author_name\" placeholder=\"Enter last name\"></el-input> -->\r\n          <el-cascader\r\n              :props=\"{value: 'id', label: 'name'}\"\r\n              v-model=\"form.author_id\"\r\n              :options=\"authors\"></el-cascader>\r\n        </el-form-item>\r\n        <el-form-item label=\"Publisher: \" style=\"margin-left: 2px\" prop=\"publisher\">\r\n          <!-- <el-input v-model=\"form.publisher\" placeholder=\"Enter publisher name\"></el-input> -->\r\n          <el-cascader\r\n              :props=\"{value: 'id', label: 'name'}\"\r\n              v-model=\"form.publisher_id\"\r\n              :options=\"publishers\"></el-cascader>\r\n        </el-form-item>\r\n        <el-form-item label=\"Tahun Rilis: \" style=\"margin-left: 2px\" prop=\"year\">\r\n          <!-- <el-date-picker\r\n              v-model=\"form.year\"\r\n              type=\"year\"\r\n              format=\"yyyy\"\r\n              value-format=\"yyyy\"\r\n              placeholder=\"Select a date\">\r\n          </el-date-picker> -->\r\n          <el-input type=\"number\" class=\"form-control\" id=\"year\" placeholder=\"year\" v-model=\"form.year\" required autocomplete=\"new-year\"></el-input>\r\n        </el-form-item>\r\n        <!-- <el-form-item id=\"credit\" label=\"Score: \" style=\"margin-left: 2px;\" prop=\"credit\">\r\n          <el-input v-model=\"form.credit\" placeholder=\"Enter score value\"></el-input>\r\n        </el-form-item> -->\r\n        <el-form-item id=\"cover\" label=\"Cover: \" style=\"margin-left: 2px;\" prop=\"cover\">\r\n          <!-- <el-input v-model=\"form.cover\" placeholder=\"Enter cover url\"></el-input> -->\r\n          <el-upload\r\n            class=\"upload-demo\"\r\n            action=\"\"\r\n            :auto-upload=\"false\"\r\n            :on-change=\"handleChange\"\r\n            :on-preview=\"handlePreview\"\r\n            :on-remove=\"handleRemove\"\r\n            :file-list=\"fileList\"\r\n            list-type=\"picture\">\r\n            <el-button size=\"small\" type=\"primary\">Click to upload</el-button>\r\n            <div slot=\"tip\" class=\"el-upload__tip\">jpg/png files with a size less than 500kb</div>\r\n          </el-upload>\r\n        </el-form-item>\r\n        <el-form-item label=\"Jumlah : \" style=\"margin-left: 2px\" prop=\"qty\">\r\n          <el-input type=\"number\" class=\"form-control\" id=\"qty\" placeholder=\"Jumlah buku\" v-model=\"form.qty\" required ></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Harga : \" style=\"margin-left: 2px\" prop=\"price\">\r\n          <el-input type=\"number\" class=\"form-control\" id=\"qty\" placeholder=\"Harga buku\" v-model=\"form.price\" required ></el-input>\r\n        </el-form-item>\r\n        <!-- <el-form-item id=\"number\" label=\"Number: \" style=\"margin-left: 2px;\" prop=\"number\">\r\n          <el-input v-model=\"form.number\" placeholder=\"Enter number\"></el-input>\r\n        </el-form-item> -->\r\n      </el-form>\r\n      <!-- button area -->\r\n      <div style=\"text-align: center\">\r\n        <el-button type=\"primary\" style=\"margin-left: 2px; height: 40px; min-width: 100px\" @click=\"save\">Submit</el-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\nimport Cookies from \"js-cookie\";\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: \"Edit\",\r\n\r\n  data() {\r\n    const checkNumeric = (rule, value, callback) => {\r\n      if(!value) {\r\n        callback(new Error('This blank cannot be empty'));\r\n      }\r\n      if(!/^[0-9]*$/.test(value)) {\r\n        callback(new Error('Please enter a numerical value'))\r\n      }\r\n      if(parseInt(value) < 0) {\r\n        callback(new Error('Please enter a number larger than 0'))\r\n      }\r\n      callback()\r\n    };\r\n\r\n    const checkISBN = (rule, value, callback) => {\r\n      if(!value) {\r\n        callback(new Error('Please enter the book\\'s ISBN'))\r\n      }\r\n      callback()\r\n    }\r\n\r\n    return {\r\n      fileList: [],\r\n      file: null,\r\n      form: {},\r\n      categories: [],\r\n      authors: [],\r\n      publishers: [],\r\n      rules: {\r\n        // cannot be empty\r\n        qty: [{ required: true, message: \"Please enter quantity book\", trigger: 'blur' }],\r\n        price: [{ required: true, message: \"Please enter price book\", trigger: 'blur' }],\r\n        title: [{ required: true, message: \"Please enter the book's name\", trigger: 'blur' }],\r\n        category_id: [{ required: true, message: \"Please enter the book's category\", trigger: 'blur' }],\r\n        author_id: [{ required: true, message: \"Please enter the book's author\", trigger: 'blur' }],\r\n        publisher_id: [{ required: true, message: \"Please enter the book's publisher\", trigger: 'blur' }],\r\n        year: [{ required: true, message: \"Please select a date\", trigger: 'blur' }],\r\n        // more restrictions\r\n        isbn: [{ required: true,  validator: checkISBN, trigger: 'blur' }],\r\n      }\r\n    }\r\n  },\r\n\r\n  created() {\r\n    const id = this.$route.query.id\r\n    request.get(\"api/book/\" + id).then(res => {\r\n      this.form = res\r\n      this.fileList.push({name: 'cover', url: this.form.cover})\r\n      console.log(this.fileList);\r\n      // if(this.form.category) {\r\n      //   this.form.category = this.form.category.id\r\n      // }\r\n    })\r\n\r\n    request.get('api/category').then(res => {\r\n      this.categories = res ? res.data.original.data : [];\r\n    })\r\n\r\n    request.get('api/author').then(res => {\r\n      this.authors = res ? res.data.original.data : [];\r\n    })\r\n\r\n    request.get('api/publisher').then(res => {\r\n      this.publishers = res ? res.data.original.data : [];\r\n    })\r\n  },\r\n\r\n  methods: {\r\n    handleRemove(file, fileList) {\r\n        console.log(file, fileList);\r\n        this.fileList.splice(0,1,{name: 'cover', url: this.form.cover});\r\n        // this.fileList.push({name: 'cover', url: this.form.cover})\r\n        \r\n    },\r\n    handlePreview(file) {\r\n      console.log(file);\r\n    },\r\n    handleChange(val){\r\n      console.log(val);\r\n      this.fileList.splice(0,1,val)\r\n    },\r\n    save() {\r\n      this.$refs['ruleForm'].validate((valid) => {\r\n        if(valid) {\r\n          \r\n          if(this.fileList[0].url != this.form.cover) this.form.cover = this.fileList[0].raw;\r\n          console.log(this.form);\r\n\r\n          if(typeof this.form.cover === 'string' || this.form.cover instanceof String){\r\n            var index = this.form.cover.indexOf(\"books\");\r\n  \r\n            // Jika \"books\" ditemukan, hapus bagian sebelumnya\r\n            if (index !== -1) {\r\n                this.form.cover = this.form.cover.substring(index);\r\n            }\r\n\r\n          }\r\n\r\n          const formData = new FormData();\r\n          formData.append('isbn', this.form.isbn);\r\n          formData.append('title', this.form.title);\r\n          formData.append('year', this.form.year);\r\n          formData.append('publisher_id', this.form.publisher_id);\r\n          formData.append('author_id', this.form.author_id);\r\n          formData.append('category_id', this.form.category_id);\r\n          formData.append('qty', this.form.qty);\r\n          formData.append('price', this.form.price);\r\n          formData.append('cover', this.form.cover);\r\n          request.post('api/book/'+this.$route.query.id, formData).then(res => {\r\n                  if(res.code == '200') {\r\n                    this.$notify.success('Updated')\r\n                    this.$router.push(\"/BookList\")\r\n                  } else {\r\n                    this.$notify.error(res.msg)\r\n                  }\r\n                })\r\n          }\r\n        })\r\n    },\r\n  },\r\n  watch: {\r\n      fileList : function (val){\r\n        console.log(val);\r\n      }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
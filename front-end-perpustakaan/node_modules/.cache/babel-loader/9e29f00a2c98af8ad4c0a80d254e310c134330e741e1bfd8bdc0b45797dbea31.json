{"ast":null,"code":"import Cookies from \"js-cookie\";\nimport Request from \"@/utils/request\";\nimport * as echarts from 'echarts';\nconst option = {\n  title: {\n    text: 'Line Chart of Borrows and Returns'\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {\n    data: ['Borrow', 'Return']\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  xAxis: {\n    type: 'category',\n    boundaryGap: false,\n    data: [] // get date form backend\n  },\n\n  yAxis: {\n    type: 'value'\n  },\n  series: [{\n    name: 'Borrow',\n    type: 'line',\n    data: [] // get number of borrow records of a day form backend\n  }, {\n    name: 'Return',\n    type: 'line',\n    data: [] // get number of record records of a day form backend\n  }]\n};\n\nexport default {\n  data() {\n    return {\n      admin: Cookies.get('admin') ? JSON.parse(Cookies.get('admin')) : {},\n      form: {\n        dateRange: 'week'\n      },\n      lineBox: null,\n      // echarts container\n      range: [{\n        value: 'week',\n        label: 'Recent week'\n      }, {\n        value: 'month',\n        label: 'Recent 30 days'\n      }, {\n        value: 'month2',\n        label: 'Recent 60 days'\n      }, {\n        value: 'month3',\n        label: 'Recent 90 days'\n      }]\n    };\n  },\n  created() {\n    // Request.get('/admin/' + this.admin.email).then(res => {\n    //   if(res.data !== null) {\n    //     this.admin = res.data\n    //   } else {\n    //     this.$router.push('/login') // jump to /login if res.data == null\n    //   }\n    // })\n  },\n  mounted() {\n    // this.load()\n  },\n  methods: {\n    load() {\n      if (!this.lineBox) {\n        this.lineBox = echarts.init(document.getElementById('lineChart')); // init lineBox\n      }\n\n      Request.get('/lineChart/getLineChart/' + this.form.dateRange).then(res => {\n        option.xAxis.data = res.data.date; // get date range\n        option.series[0].data = res.data.borrows; // get borrow data\n        option.series[1].data = res.data.reterns; // get return data\n        this.lineBox.setOption(option); // generate line chart\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAwBA;AACA;AACA;AAEA;EACAA;IACAC;EACA;EACAC;IACAC;EACA;EACAC;IACAC;EACA;EACAC;IACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACAC;MACAC;IACA;EACA;EACAC;IACAC;IACAC;IACAX;EACA;;EACAY;IACAF;EACA;EACAG,SACA;IACAC;IACAJ;IACAV;EACA,GACA;IACAc;IACAJ;IACAV;EACA;AAEA;;AAEA;EACAA;IACA;MACAe;MACAC;QAAAC;MAAA;MACAC;MAAA;MACAC;QACAC;QACAC;MACA;QACAD;QACAC;MACA;QACAD;QACAC;MACA;QACAD;QACAC;MACA;IACA;EACA;EAEAC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACA;EAEAC;IACA;EAAA,CACA;EAEAC;IACAC;MACA;QACA;MACA;;MACAC;QACAC;QACAA;QACAA;QACA;MACA;IACA;EAGA;AACA","names":["title","text","tooltip","trigger","legend","data","grid","left","right","bottom","containLabel","toolbox","feature","saveAsImage","xAxis","type","boundaryGap","yAxis","series","name","admin","form","dateRange","lineBox","range","value","label","created","mounted","methods","load","Request","option"],"sourceRoot":"src/views/home","sources":["HomeView.vue"],"sourcesContent":["<template>\n  <div style=\"padding: 10px;\">\n    <!-- date range selector -->\n    <!-- <div>\n      <el-select v-model=\"form.dateRange\" placeholder=\"Select date range\" @change=\"load\">\n        <el-option\n            v-for=\"item in range\"\n            :key=\"item.value\"\n            :label=\"item.label\"\n            :value=\"item.value\">\n        </el-option>\n      </el-select>\n    </div> -->\n    <!-- line chart area -->\n    <div style=\"margin-top: 10px\">\n      <el-card>\n        <!-- <div id=\"lineChart\" style=\"width: 100%; height: 700px\"></div> -->\n        <h1>Selamat Datang</h1>\n      </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Cookies from \"js-cookie\";\nimport Request from \"@/utils/request\";\nimport * as echarts from 'echarts';\n\nconst option = {\n  title: {\n    text: 'Line Chart of Borrows and Returns'\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {\n    data: ['Borrow', 'Return']\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  xAxis: {\n    type: 'category',\n    boundaryGap: false,\n    data: [] // get date form backend\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [\n    {\n      name: 'Borrow',\n      type: 'line',\n      data: [] // get number of borrow records of a day form backend\n    },\n    {\n      name: 'Return',\n      type: 'line',\n      data: [] // get number of record records of a day form backend\n    },\n  ]\n};\n\nexport default {\n  data() {\n    return {\n      admin: Cookies.get('admin') ? JSON.parse(Cookies.get('admin')): {},\n      form: { dateRange: 'week' },\n      lineBox: null, // echarts container\n      range: [{\n        value: 'week',\n        label: 'Recent week'\n      }, {\n        value: 'month',\n        label: 'Recent 30 days'\n      }, {\n        value: 'month2',\n        label: 'Recent 60 days'\n      }, {\n        value: 'month3',\n        label: 'Recent 90 days'\n      }],\n    }\n  },\n\n  created() {\n    // Request.get('/admin/' + this.admin.email).then(res => {\n    //   if(res.data !== null) {\n    //     this.admin = res.data\n    //   } else {\n    //     this.$router.push('/login') // jump to /login if res.data == null\n    //   }\n    // })\n  },\n\n  mounted() {\n    // this.load()\n  },\n\n  methods: {\n    load() {\n      if(!this.lineBox) {\n        this.lineBox = echarts.init(document.getElementById('lineChart')) // init lineBox\n      }\n      Request.get('/lineChart/getLineChart/' + this.form.dateRange).then(res => {\n        option.xAxis.data = res.data.date // get date range\n        option.series[0].data = res.data.borrows // get borrow data\n        option.series[1].data = res.data.reterns // get return data\n        this.lineBox.setOption(option) // generate line chart\n      })\n    },\n\n\n  }\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
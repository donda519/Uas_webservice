{"ast":null,"code":"import request from \"@/utils/request\";\nimport moment from \"moment/moment\";\nexport default {\n  name: \"Add\",\n  data() {\n    const checkISBN = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('Please enter the book\\'s ISBN'));\n      }\n      callback();\n    };\n    const checkEmail = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('Please enter the email address'));\n      }\n      if (!/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/.test(value)) {\n        callback(new Error('Illegal email address'));\n      }\n      callback();\n    };\n    const checkPhone = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('Please enter the phone number'));\n      }\n      if (!/^[1,2,3,4,5,6,7,8,9][0-9]{9}$/.test(value)) {\n        callback(new Error('Illegal phone number'));\n      }\n      callback();\n    };\n    return {\n      form: {\n        duration: 1,\n        date_start: moment(new Date()).format('YYYY-MM-DD HH:mm:ss'),\n        date_end: moment(new Date()).add('days', 1).format('YYYY-MM-DD HH:mm:ss')\n      },\n      books: [],\n      users: [],\n      unitCredit: 0,\n      // rules to check the input values\n      rules: {\n        title: [{\n          required: true,\n          message: \"Please enter the book's name\",\n          trigger: 'blur'\n        }],\n        anggota: [{\n          required: true,\n          message: \"Please enter anggota\",\n          trigger: 'blur'\n        }]\n        // more restrictions\n        // isbn: [{ required: true,  validator: checkISBN, trigger: 'blur' }],\n      }\n    };\n  },\n\n  created() {\n    // get book list\n    request.get('api/book').then(res => {\n      this.books = res.data.original.data;\n    });\n    // get user list\n    request.get('api/member').then(res => {\n      this.users = res.data.original.data;\n    });\n  },\n  methods: {\n    save() {\n      this.$refs['ruleForm'].validate(valid => {\n        if (valid) {\n          this.form.books = [this.form.books];\n          request.post('api/transaction', this.form).then(res => {\n            if (res.code == '200') {\n              this.$notify.success('Submitted');\n              this.$refs['ruleForm'].resetFields();\n              location.reload();\n            } else {\n              this.$notify.error(res.msg);\n            }\n          });\n        }\n      });\n    },\n    // get data from book\n    selectBook() {\n      // console.log(this.form.isbn)\n      const book = this.form.books;\n      request.get(\"api/book/\" + book).then(res => {\n        this.form.title = res.title;\n        this.$forceUpdate();\n      });\n    },\n    // get data from user\n    selectUser() {\n      const user = this.form.anggota;\n      request.get(\"api/member/\" + user).then(res => {\n        this.form.phone_number = res.phone_number;\n        this.form.name = res.name;\n        this.form.email = res.email;\n        this.$forceUpdate();\n      });\n    },\n    handleChange() {\n      this.form.date_start = moment(new Date()).format('YYYY-MM-DD HH:mm:ss');\n      this.form.date_end = moment(new Date()).add('days', this.form.duration).format('YYYY-MM-DD HH:mm:ss');\n    }\n  }\n};","map":{"version":3,"mappings":"AAsDA;AACA;AAEA;EACAA;EAEAC;IACA;MACA;QACAC;MACA;MACAA;IACA;IAEA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACAA;IACA;IAEA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACAA;IACA;IAEA;MACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAC;MACA;MACAC;QACAC;UAAAC;UAAAC;UAAAC;QAAA;QACAC;UAAAH;UAAAC;UAAAC;QAAA;QACA;QACA;MACA;IACA;EACA;;EAEAE;IACA;IACAC;MACA;IACA;IACA;IACAA;MACA;IACA;EACA;EAEAC;IACAC;MACA;QACA;UACA;UACAF;YACA;cACA;cACA;cACAG;YACA;cACA;YACA;UACA;QACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACAJ;QACA;QACA;MACA;IACA;IACA;IACAK;MACA;MACAL;QACA;QACA;QACA;QACA;MACA;IACA;IAEAM;MACA;MACA;IACA;EACA;AACA","names":["name","data","callback","form","duration","date_start","date_end","books","users","unitCredit","rules","title","required","message","trigger","anggota","created","request","methods","save","location","selectBook","selectUser","handleChange"],"sourceRoot":"src/views/borrow","sources":["Add.vue"],"sourcesContent":["<template>\r\n  <div style=\"padding: 10px;\">\r\n    <div style=\"font-size: 40px; font-family: Arial; margin-bottom: 5px\">Add New Borrow Record</div>\r\n    <div style=\" width: 80%\">\r\n      <!-- form area -->\r\n      <el-form :inline=\"true\" :model=\"form\" :rules=\"rules\" ref=\"ruleForm\">\r\n        <el-form-item label=\"ISBN: \" style=\"margin-left: 2px\" prop=\"isbn\">\r\n          <el-select v-model=\"form.books\" clearable filterable placeholder=\"Please select Buku\" @change=\"selectBook\">\r\n            <el-option\r\n                v-for=\"item in books\"\r\n                :key=\"item.id\"\r\n                :label=\"item.title + ` (${item.isbn})`\"\r\n                :value=\"item.id\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"Book Title: \" style=\"margin-left: 2px\"  prop=\"title\">\r\n          <el-input v-model=\"form.title\" placeholder=\"Enter book's name\" disabled></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"User ID: \" style=\"margin-left: 2px\" prop=\"anggota\">\r\n          <el-select v-model=\"form.anggota\" clearable filterable placeholder=\"Please select an user ID\" @change=\"selectUser\">\r\n            <el-option\r\n                v-for=\"item in users\"\r\n                :key=\"item.id\"\r\n                :label=\"`(${item.id})` + ` ${item.name}`\"\r\n                :value=\"item.id\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"Nama : \" style=\"margin-left: 2px\" prop=\"name\">\r\n          <el-input v-model=\"form.name\" placeholder=\"Enter username\" disabled></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Phone: \" style=\"margin-left: 2px\" prop=\"phone\">\r\n          <el-input v-model=\"form.phone_number\" placeholder=\"Enter phone number\" disabled></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"Email: \" style=\"margin-left: 2px\" prop=\"email\">\r\n          <el-input v-model=\"form.email\" placeholder=\"Enter email\" disabled></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Durasi Peminjaman (hari): \" style=\"margin-left: 2px\" prop=\"duration\">\r\n          <template>\r\n            <el-input-number v-model=\"form.duration\" @change=\"handleChange\" :min=\"1\" :max=\"10\"></el-input-number>\r\n          </template>\r\n        </el-form-item>\r\n      </el-form>\r\n      <!-- button area -->\r\n      <div style=\"text-align: center\">\r\n        <el-button type=\"primary\" style=\"margin-left: 2px; height: 40px; min-width: 100px\" @click=\"save\">Submit</el-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\nimport moment from \"moment/moment\";\r\n\r\nexport default {\r\n  name: \"Add\",\r\n\r\n  data() {\r\n    const checkISBN = (rule, value, callback) => {\r\n      if(!value) {\r\n        callback(new Error('Please enter the book\\'s ISBN'))\r\n      }\r\n      callback()\r\n    }\r\n\r\n    const checkEmail = (rule, value, callback) => {\r\n      if(!value) {\r\n        callback(new Error('Please enter the email address'))\r\n      }\r\n      if(!/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/.test(value)) {\r\n        callback(new Error('Illegal email address'))\r\n      }\r\n      callback()\r\n    };\r\n\r\n    const checkPhone = (rule, value, callback) => {\r\n      if(!value) {\r\n        callback(new Error('Please enter the phone number'))\r\n      }\r\n      if (!/^[1,2,3,4,5,6,7,8,9][0-9]{9}$/.test(value)) {\r\n        callback(new Error('Illegal phone number'));\r\n      }\r\n      callback()\r\n    }\r\n\r\n    return {\r\n      form: {\r\n        duration: 1,\r\n        date_start : moment(new Date()).format('YYYY-MM-DD HH:mm:ss'),\r\n        date_end : moment(new Date()).add('days', 1).format('YYYY-MM-DD HH:mm:ss')\r\n      },\r\n      books: [],\r\n      users: [],\r\n      unitCredit: 0,\r\n      // rules to check the input values\r\n      rules: {\r\n        title: [{ required: true, message: \"Please enter the book's name\", trigger: 'blur' }],\r\n        anggota: [{ required: true, message: \"Please enter anggota\", trigger: 'blur' }],\r\n        // more restrictions\r\n        // isbn: [{ required: true,  validator: checkISBN, trigger: 'blur' }],\r\n      }\r\n    }\r\n  },\r\n\r\n  created() {\r\n    // get book list\r\n    request.get('api/book').then(res => {\r\n      this.books = res.data.original.data\r\n    })\r\n    // get user list\r\n    request.get('api/member').then(res => {\r\n      this.users = res.data.original.data\r\n    })\r\n  },\r\n\r\n  methods: {\r\n    save() {\r\n      this.$refs['ruleForm'].validate((valid) => {\r\n        if(valid) {\r\n          this.form.books = [this.form.books];\r\n          request.post('api/transaction', this.form).then(res => {\r\n            if(res.code == '200') {\r\n              this.$notify.success('Submitted')\r\n              this.$refs['ruleForm'].resetFields()\r\n              location.reload()\r\n            } else {\r\n              this.$notify.error(res.msg)\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    // get data from book\r\n    selectBook() {\r\n      // console.log(this.form.isbn)\r\n      const book = this.form.books\r\n      request.get(\"api/book/\" + book).then( res => {\r\n        this.form.title = res.title\r\n        this.$forceUpdate()\r\n      })\r\n    },\r\n    // get data from user\r\n    selectUser() {\r\n      const user = this.form.anggota\r\n      request.get(\"api/member/\" + user).then(res => {\r\n        this.form.phone_number = res.phone_number\r\n        this.form.name = res.name\r\n        this.form.email = res.email\r\n        this.$forceUpdate()\r\n      })\r\n    },\r\n\r\n    handleChange() {\r\n      this.form.date_start =  moment(new Date()).format('YYYY-MM-DD HH:mm:ss');\r\n      this.form.date_end =  moment(new Date()).add('days', this.form.duration).format('YYYY-MM-DD HH:mm:ss');\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}